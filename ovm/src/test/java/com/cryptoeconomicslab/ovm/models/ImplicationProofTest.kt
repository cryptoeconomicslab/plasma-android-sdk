package com.cryptoeconomicslab.ovm.models

import org.junit.Test
import org.junit.Assert.*
import com.cryptoeconomicslab.ovm.models.Property;
import org.web3j.abi.datatypes.Address
import org.web3j.abi.datatypes.DynamicArray
import org.web3j.abi.datatypes.DynamicBytes

val String.hexAsByteArray inline get() = this.chunked(2).map { it.toUpperCase().toInt(16).toByte() }.toByteArray()

class ImplicationProofTest {
    @Test
    fun encode_implication_proof_not_predicate() {
        val encodeTest = """
            |0000000000000000000000000000000000000000000000000000000000000040
            |0000000000000000000000000000000000000000000000000000000000000120
            |00000000000000000000000000000000000000000000000000000000000000c0
            |0000000000000000000000003fd56895af1191112a4aae106050237452f3d028
            |0000000000000000000000000000000000000000000000000000000000000040
            |0000000000000000000000000000000000000000000000000000000000000060
            |0000000000000000000000003754b4a1ac4a17ee8bea23c5964071f95acb9dc1
            |0000000000000000000000000000000000000000000000000000000000000040
            |0000000000000000000000000000000000000000000000000000000000000000
            |0000000000000000000000000000000000000000000000000000000000000001
            |0000000000000000000000000000000000000000000000000000000000000020
            |0000000000000000000000000000000000000000000000000000000000000002
            |0202000000000000000000000000000000000000000000000000000000000000
            """.trimMargin().replace("\n", "")
        val boolProperty = Property(Address("0x0000000000000000000000003754b4a1ac4a17ee8bea23c5964071f95acb9dc1"), DynamicBytes(byteArrayOf()))
        val property = Property(Address("0x0000000000000000000000003fd56895af1191112a4aae106050237452f3d028"), DynamicBytes(boolProperty.encode().hexAsByteArray))
        val implicationProof = ImplicationProof(
            property,
            DynamicArray<DynamicBytes>(DynamicBytes(byteArrayOf(0x02, 0x02))));
        assertEquals(implicationProof.encode(), encodeTest)
    }
    @Test
    fun encode_implication_proof_bool_predicate() {
        val encodeTest = """
            |0000000000000000000000000000000000000000000000000000000000000040
            |00000000000000000000000000000000000000000000000000000000000000c0
            |0000000000000000000000000000000000000000000000000000000000000060
            |0000000000000000000000003754b4a1ac4a17ee8bea23c5964071f95acb9dc1
            |0000000000000000000000000000000000000000000000000000000000000040
            |0000000000000000000000000000000000000000000000000000000000000000
            |0000000000000000000000000000000000000000000000000000000000000001
            |0000000000000000000000000000000000000000000000000000000000000020
            |0000000000000000000000000000000000000000000000000000000000000002
            |0202000000000000000000000000000000000000000000000000000000000000
            """.trimMargin().replace("\n", "")
        val boolProperty = Property(Address("0x0000000000000000000000003754b4a1ac4a17ee8bea23c5964071f95acb9dc1"), DynamicBytes(byteArrayOf()))
        val implicationProof = ImplicationProof(
            boolProperty,
            DynamicArray<DynamicBytes>(DynamicBytes(byteArrayOf(0x02, 0x02))));
        assertEquals(implicationProof.encode(), encodeTest)
    }

}
